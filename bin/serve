#!/usr/bin/env bb

;; FIXME: sync printing to STDOUT.

(ns http-server
  (:require [babashka.fs :as fs]
            [clojure.string :as str]
            [org.httpkit.server :as server]))

(defonce port 9000)
(defonce base-dir "pages/")

(defonce mime-types
  {"html" "text/html"
   "js"   "text/javascript"
   "mjs"  "text/javascript"
   "css"  "text/css"
   "png"  "image/png"
   "jpg"  "image/jpeg"
   "svg"  "image/svg+xml"})

(defn get-mime-type [ext] (or (get mime-types ext) "application/octet-stream"))

(defn get-ext [path] (last (re-find #"\.(\w+)$" path)))

(defn standardise-path [uri]
  (let [path (str/replace-first uri #"^/" "")]
    (if (get-ext path) path (str path ".html"))))

;; SVG sprites needs CORS.
;; https://docs.fontawesome.com/web/add-icons/svg-sprites
(defn add-cors [headers]
  (merge headers {"Access-Control-Allow-Origin" "*"
                  "Access-Control-Allow-Methods" "GET,HEAD"
                  "Access-Control-Allow-Headers" "Content-Type"}))

(defn serve [path]
  (let [mime-type (get-mime-type (get-ext path))]
    (println (str " ... HTTP 200, MIME " mime-type "."))
    {:headers (add-cors {"Content-Type" mime-type}) :body (fs/file path)}))

(defn not-found [path]
  (println " ... HTTP 404.")
  {:status 404 :body (str "File not found: " path "\n")})

(defn handler [request]
  (let [http-method (str/upper-case (name (:request-method request)))
        server-path (:uri request)
        fs-base-path (if (= server-path "/")
                       "index.html"
                       (standardise-path server-path))
        fs-full-path (str base-dir fs-base-path)]
    (print (str "~ HTTP " http-method " " server-path " -> " fs-full-path))
    (if (fs/readable? fs-full-path) (serve fs-full-path) (not-found fs-full-path))))

(server/run-server handler {:port port})
(println (str "~ Starting HTTP server at port " port ".\n"))

@(promise)
